package heap_algorithm;

import java.util.Arrays;
import java.util.Random;

public class heaps {

	// Added parameter 'n' for array length and implementation for heapSort.
	public static int[] maxHeapify(int[] A, int n, int i) {
		// Modified the left and right child indices for zero-based array implementation.
		// The original initialization (int largest = 0) caused an out of bounds exception.
		int largest = i;
		int left = 2 * i + 1;
		int right = 2 * i + 2;
		// Updated the conditions and removed the equality operators since indexing of arrays start from 0.
		if (left < n && A[left] > A[largest])
			largest = left;

		if (right < n && A[right] > A[largest])
			largest = right;

		if (largest != i) {
			int temp = A[i];
			A[i] = A[largest];
			A[largest] = temp;

			maxHeapify(A, n, largest);
		}
		return A;
	}

	public static int[] buildMaxHeap(int[] A) {
		int n = A.length;
        // Start heapify process from the last non-leaf node down to the root (index 0). Modified.
		for (int i = n / 2 - 1; i >= 0; i--)
			maxHeapify(A, n, i);
		return A;
	}

	// Same modifications applied to maxHeap here.
	public static int[] minHeapify(int[] A, int n, int i) {
		int smallest = i;
		int left = 2 * i + 1;
		int right = 2 * i + 2;
		// If the left child exists and is smaller than the current smallest element,
		// update the smallest index.
		if (left < n && A[left] < A[smallest])
			smallest = left;
		// Same for right child.
		if (right < n && A[right] < A[smallest])
			smallest = right;
		// If the smallest element is not equal to the current index, swap the current
		// element with the smallest child.
		if (smallest != i) {
			int temp = A[i];
			A[i] = A[smallest];
			A[smallest] = temp;
			// Recursively heapify the sub-tree.
			minHeapify(A, n, smallest);
		}
		return A;
	}

	public static int[] buildMinHeap(int[] A) {
		int n = A.length;
		for (int i = n / 2 - 1; i >= 0; i--)
			minHeapify(A, n, i);
		return A;
	}

	// Order was not specified so both ascending + descending was added.
	
    // Heap Sort algorithm to sort the array in ascending order.
	public static int[] heapSortAscending(int[] A) {
		int n = A.length;
		// Build the max heap from the array.
	    for (int i = n / 2 - 1; i >= 0; i--)
	        maxHeapify(A, n, i);
	    // Extract elements one by one from the max heap.
	    for (int i = n - 1; i > 0; i--) {
	        int temp = A[0];
	        A[0] = A[i];
	        A[i] = temp;
	        maxHeapify(A, i, 0);
	    }
	    return A;
	}
	
	// Heap Sort algorithm to sort the array in descending order.
	public static int[] heapSortDescending(int[] A) {
	    int n = A.length;

	    // Build the min heap from the array.
	    for (int i = n / 2 - 1; i >= 0; i--)
	        minHeapify(A, n, i);
	    // Extract elements one by one from the min heap.
	    for (int i = n - 1; i > 0; i--) {
	        int temp = A[0];
	        A[0] = A[i];
	        A[i] = temp;
	        minHeapify(A, i, 0);
	    }
	    return A;
	}

	public static void main(String[] args) {
		
//		Test Array
//		int arr[] = { 1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17 };
		
		// Creates array of 10 random numbers.
		// + Imported array and random utility for simplicity. 
		int[] arr = new int[10];
		Random random = new Random();
		for (int i = 0; i < arr.length; i++) {
			arr[i] = random.nextInt(100);
		}

		// Print OG Array.
		System.out.println("Original Array: " + Arrays.toString(arr));

		// Cloned original array to generate the max heap heap from the same example.
		int[] maxHeap = buildMaxHeap(arr.clone());
		// Print generated max heap.
		System.out.println("Max Heap: " + Arrays.toString(maxHeap));

		// Cloned original...
		int[] minHeap = buildMinHeap(arr.clone());
		// Print generated min heap.
		System.out.println("Min Heap: " + Arrays.toString(minHeap));

		// Cloned original...
		int[] sortedArray1 = heapSortAscending(arr.clone());
		// Print the sorted array.
		System.out.println("After Sorting (Ascending): " + Arrays.toString(sortedArray1));
		
		// Cloned original...
		int[] sortedArray2 = heapSortDescending(arr.clone());
		// Print the sorted array.
		System.out.println("After Sorting (Descending): " + Arrays.toString(sortedArray2));

	}
}
